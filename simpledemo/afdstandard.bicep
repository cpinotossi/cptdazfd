targetScope = 'resourceGroup'

param originFQDN string
param endpointFQDN string

resource afdProfile1 'Microsoft.Cdn/profiles@2022-11-01-preview' = {
  name: 'afdProfile1'
  location: 'Global'
  sku: {
    name: 'Standard_AzureFrontDoor'
  }
  properties: {
    originResponseTimeoutSeconds: 60
  }
}

resource afdEndpointBlob 'Microsoft.Cdn/profiles/afdendpoints@2022-11-01-preview' = {
  parent: afdProfile1
  name: 'afdEndpointBlob'
  location: 'Global'
  properties: {
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    enabledState: 'Enabled'
  }
}

resource afdCustomDomainBlob 'Microsoft.Cdn/profiles/customdomains@2022-11-01-preview' = {
  parent: afdProfile1
  name: 'afdCustomDomainBlob'
  properties: {
    hostName: 'blob.cptdev.com'
    tlsSettings: {
      certificateType: 'ManagedCertificate'
      minimumTlsVersion: 'TLS12'
    }
  }
}

resource afdOriginGroupBlob 'Microsoft.Cdn/profiles/origingroups@2022-11-01-preview' = {
  parent: afdProfile1
  name: 'afdOriginGroupBlob'
  properties: {
    loadBalancingSettings: {
      sampleSize: 4
      successfulSamplesRequired: 3
      additionalLatencyInMilliseconds: 50
    }
    trafficRestorationTimeToHealedOrNewEndpointsInMinutes: 10
    sessionAffinityState: 'Disabled'
  }
}

resource afdRuleSet1 'Microsoft.Cdn/profiles/rulesets@2022-11-01-preview' = {
  parent: afdProfile1
  name: 'afdRuleSet1'
}

resource afdOriginBlob 'Microsoft.Cdn/profiles/origingroups/origins@2022-11-01-preview' = {
  parent: afdOriginGroupBlob
  name: 'afdOriginBlob'
  properties: {
    hostName: originFQDN
    httpPort: 80
    httpsPort: 443
    originHostHeader: originFQDN
    priority: 1
    weight: 1000
    enabledState: 'Enabled'
    enforceCertificateNameCheck: true
  }
}

resource afdRuleHttp2Https 'Microsoft.Cdn/profiles/rulesets/rules@2022-11-01-preview' = {
  parent: afdRuleSet1
  name: 'afdRule1'
  properties: {
    order: 1
    conditions: [
      {
        name: 'QueryString'
        parameters: {
          typeName: 'DeliveryRuleQueryStringConditionParameters'
          operator: 'Equal'
          negateCondition: false
          matchValues: [
            'test=1'
          ]
          transforms: []
        }
      }
    ]
    actions: [
      {
        name: 'ModifyResponseHeader'
        parameters: {
          typeName: 'DeliveryRuleHeaderActionParameters'
          headerAction: 'Append'
          headerName: 'test'
          value: 'ok'
        }
      }
    ]
    matchProcessingBehavior: 'Continue'
  }
}

resource afdRouteBlob 'Microsoft.Cdn/profiles/afdendpoints/routes@2022-11-01-preview' = {
  parent: afdEndpointBlob
  name: 'afdRouteBlob'
  properties: {
    customDomains: [
      {
        id: afdCustomDomainBlob.id
      }
    ]
    originGroup: {
      id: afdOriginGroupBlob.id
    }
    ruleSets: [
      {
        id: afdRuleSet1.id
      }
    ]
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [
      '/*'
    ]
    forwardingProtocol: 'MatchRequest'
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
    enabledState: 'Enabled'
  }
}

resource afdIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: 'afdIdentity'
  location: resourceGroup().location
}

var builtInRoleNames = {
  Contributor: tenantResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')
  'Data Operator for Managed Disks': tenantResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')
  'Disk Backup Reader': tenantResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')
  'Disk Pool Operator': tenantResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')
  'Disk Restore Operator': tenantResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')
  'Disk Snapshot Contributor': tenantResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')
  Owner: tenantResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')
  Reader: tenantResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')
  'Role Based Access Control Administrator (Preview)': tenantResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')
  'User Access Administrator': tenantResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')
  'Virtual Machine Contributor': tenantResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')
}

resource raMID2Contributor 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(resourceGroup().id,afdIdentity.id,'Contributor')
  properties: {
    roleDefinitionId: builtInRoleNames['Contributor']
    principalId: afdIdentity.properties.principalId
    principalType: 'ServicePrincipal'
   }
  scope: resourceGroup()
}

resource afdScriptGetValidationToken 'Microsoft.Resources/deploymentScripts@2023-08-01' = {
  name: 'afdGetCustomDomainValidationToken'
  location: resourceGroup().location
  kind: 'AzureCLI'
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${afdIdentity.id}': {}
    }
  }
  properties: {
    azCliVersion: '2.53.0'
    cleanupPreference: 'Always'
    retentionInterval: 'PT1H'
    scriptContent: 'result=$(az afd custom-domain show --custom-domain-name ${afdCustomDomainBlob.name} -g ${resourceGroup().name} --profile-name ${afdProfile1.name} --query validationProperties.validationToken -o tsv); echo $result | jq -n -c --arg st $result \'{Result: $st}\' > $AZ_SCRIPTS_OUTPUT_PATH'

  }
  dependsOn: [
    afdCustomDomainBlob
  ]
}

output afdValidationToken string = afdScriptGetValidationToken.properties.outputs.result
output afdEndpointHostName string = afdEndpointBlob.properties.hostName
